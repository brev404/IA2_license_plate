# src/character_recognition/configs/base_ocr_config.yaml

project_root: "D:/files/university/projects/IA2" # IMPORTANT: SET YOUR ABSOLUTE PROJECT ROOT
experiment_name: "default_ocr_experiment"
dataset_name: "romanian"  # 'romanian' or 'spanish'
split: "valid"            # 'train', 'valid', or 'test'

# --- Input Data Source ---
# Defines where the cropped plate images come from.
# Options:
#   'ground_truth': Uses manually verified crops (you'll create these with preprocess_ocr_data.py).
#   'detector_output': Uses crops generated by a detection model.
crop_source: "ground_truth"

# If crop_source is 'detector_output', specify the name of the folder
# under 'data/ocr_input_data/detector_crops/' that contains the crops.
# This name should ideally reflect the model and dataset used for detection.
# Example: "yolov8s_spanish_train" (meaning crops from yolov8s on spanish train images)
detector_run_name_for_crops: "yolov8s_spanish_e50_train_images" # Just an example

# --- OCR Engine Settings ---
# 'tesseract', 'easyocr', 'custom_model' (you can add more)
ocr_engine: "tesseract"

tesseract_config: "--oem 3 --psm 7" # Page Segmentation Mode 7: Treat image as single text line
tesseract_whitelist: "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" # Common EU plate characters

# For custom model (if you train one later)
# custom_ocr_model_path: "path/to/your_ocr_model.pt"

# --- Preprocessing for OCR ---
# These are flags, the actual implementation is in utils_ocr.py
apply_grayscale: True
apply_clahe: True
apply_threshold: "adaptive_gaussian" # "otsu", "adaptive_gaussian", "none"
invert_binary: False # True if Tesseract needs black text on white for your threshold output

# --- Validation Settings ---
# 'RO', 'ES', 'GENERIC_ALPHANUM', 'NONE'
plate_format_validation: "RO"

# --- Output ---
# results_base_dir: "results/OCR_Experiments" # Relative to project_root
# results_json_filename: "ocr_results.json"
# analysis_summary_filename: "analysis_summary.txt"